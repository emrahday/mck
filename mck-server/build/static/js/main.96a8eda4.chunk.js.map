{"version":3,"sources":["Item.js","api.js","List.js","App.js","serviceWorker.js","index.js"],"names":["Item","_this","this","_this$props$data","props","data","id","state","_this$props$data$payl","payload","_this$props$data$payl2","reportType","_this$props$data$payl3","_this$props$data$payl4","message","react_default","a","createElement","react","className","href","onClick","onBlockClick","onResolveClick","Component","API_URI","uri","GET_REPORT","concat","RESOLVE","BLOCK","api","getReportList","_getReportList","Object","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","fetch","sent","json","abrupt","t0","stop","apply","arguments","resolveElement","_resolveElement","_callee2","_context2","method","_x","blockElement","_blockElement","_callee3","_context3","_x2","List","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","elements","error","getReport","setState","removeElementFromView","filter","item","_this2","map","src_Item_0","key","onBlock","onResolve","App","src_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96a8eda4.chunk.js","sourcesContent":["import React, { Component, Fragment  } from 'react';\nimport './Item.css'\n\nclass Item extends Component {\n\n    render() {\n\n        // deconstruct id, state, reportType, message conditionally\n        // check test file, even if there is no any payload submitted\n        // it can still set default values. \n        const { \n            id, \n            state, \n            payload: { reportType = '' } = { reportType: ''}, \n            payload : { message = '' } = { message: '' }\n        } = this.props.data;\n\n        return (\n            <Fragment>\n                <div className=\"row\">\n                    <div className=\"content\">\n                        <div className=\"id info small\">{id}</div>\n                        <div className=\"type info large\">{reportType}</div>\n                        <div className=\"state info small\">{state}</div>\n                        <div className=\"message info large\">{message}</div>\n                        <div className=\"details info small\">\n                            <a href=\"/\">Details</a>\n                        </div>\n                    </div>\n                    <div className=\"buttons\">\n                        <button onClick={ () => { this.props.onBlockClick(id) }}>Block</button>\n                        <button onClick={ () => { this.props.onResolveClick(id) }}>Resolve</button>\n                    </div>\n                </div>\n            </Fragment>\n         );\n    }\n\n}\n\nexport default Item;","\nconst API_URI = 'http://localhost:9000'\n\nconst uri = {\n    GET_REPORT : `${API_URI}/reports`,\n    RESOLVE : id => `${API_URI}/reports/${id}`,\n    BLOCK : id => `${API_URI}/reports/${id}/block`\n}\n\nconst api = {\n    getReportList: async () => {\n        try {\n            let response = await fetch(uri.GET_REPORT);\n            let data = await response.json()\n            return data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    resolveElement: async id => {\n        try {\n            let response = await fetch(uri.RESOLVE(id), { method: 'PUT'});\n            let data = await response.json()\n            return data;\n        } catch (error) {\n            throw error;\n        }\n    },\n    blockElement: async id => {\n        try {\n            let response = await fetch(uri.BLOCK(id), { method: 'PUT'});\n            let data = await response.json()\n            return data;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport default api;","import React, { Component, Fragment  } from \"react\";\nimport Item from \"./Item\";\nimport api from \"./api\";\n\nclass List extends Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            elements: [],\n            error: \"\"\n        }\n    }\n    \n    componentDidMount() {\n        this.getReport();\n    }\n\n    async getReport(){\n        try {\n            const elements = await api.getReportList();\n            this.setState({\n                elements\n            });\n        } catch (error) {\n            this.setState({\n                error: 'Unexpected error while fetching report :( Please check API is running properly'\n            });\n        }\n    }\n\n    async onBlock(id) {\n        try {\n            const result = await api.blockElement(id);\n            if (result.id === id){\n                this.removeElementFromView(id);\n            } \n        } catch (error) {\n            this.setState({\n                error: 'Unexpected error while blocking item :( Please check API is running properly'\n            });\n        }\n    }\n    \n    async onResolve(id) {\n        try {\n            const result = await api.resolveElement(id);\n            if (result.id === id){\n                this.removeElementFromView(id);\n            }\n        } catch (error) {\n            this.setState({\n                error: 'Unexpected error while resolving item :( Please check API is running properly'\n            });\n        }\n    }\n\n    removeElementFromView(id){\n        const elements = this.state.elements.filter( item => item.id !== id);\n        this.setState({\n            elements\n        });\n    }\n\n    render(){\n        return (\n            <Fragment>\n                <h2>Reports FOO</h2>\n                <div className=\"error\">{this.state.error}</div>\n                {this.state.elements.map( item => (\n                    <Item \n                        key={ item.id } \n                        data={ item }\n                        onBlockClick={ id => this.onBlock(id)}\n                        onResolveClick={ id => this.onResolve(id)}\n                    />\n                ))}\n            </Fragment>\n         );\n    }\n}\n\nexport default List;","import React from 'react';\nimport List from './List';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-column\">\n        <List/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}